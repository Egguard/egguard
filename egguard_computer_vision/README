# EggGuard Computer Vision

A ROS2 package for detecting and analyzing eggs using computer vision techniques, specifically designed for the EggGuard robot system.

## Overview

EggGuard Computer Vision is a specialized ROS2 package that combines YOLOv8n deep learning with traditional computer vision techniques to detect, analyze, and track chicken eggs in poultry farm environments. The package processes camera images to identify eggs, determine their condition (broken or intact), and calculate their positions in both robot-relative and world coordinates.

## System Architecture

### 1. Image Acquisition and Processing Flow

```
Camera Topic (/camera/image_raw) for Gazebo or /image for real robot
        ↓
EggDetectionNode (main.py)
        ↓
    EggDetector (egg_detector.py)
        ↓
    EggAnalyzer (egg_analysis.py)
        ↓
    Data Publication & Backend Communication
```

### 2. Component Details

#### 2.1 EggDetectionNode (main.py)
- **Input Topics**:
  - `/camera/image_raw`: Raw camera images (sensor_msgs/Image)
  - `/odom`: Robot odometry data (nav_msgs/Odometry)
  - `/camera/camera_info`: Camera parameters (std_msgs/String)

- **Output Topics**:
  - `/egguard/egg_count`: Number of detected eggs (std_msgs/Int32)
  - `/egguard/egg_data`: Detailed egg information (std_msgs/String)
  - `/egguard/processed_image`: Visualization of detections (sensor_msgs/Image)
  - `/egguard/yolo_raw`: Raw YOLO detection visualization (sensor_msgs/Image)

#### 2.2 EggDetector (egg_detector.py)
- Implements YOLOv8n-based egg detection
- Features:
  - Preprocessing of input images
  - YOLO model inference
  - Non-maximum suppression for overlapping detections
  - Visualization of detections
  - Fallback to Hough circles if YOLO fails

#### 2.3 EggAnalyzer (egg_analysis.py)
- Analyzes detected eggs for:
  - Validation of egg detection
  - Broken egg detection using texture analysis
  - Coordinate conversion (image → robot → world)
  - Position calculation using camera parameters

## Detailed Processing Flow

1. **Image Reception**:
   - Images arrive via `/camera/image_raw` topic
   - Converted from ROS message to OpenCV format using cv_bridge

2. **Egg Detection**:
   - Image preprocessing (resizing, normalization)
   - YOLOv8n inference for egg detection
   - Extraction of egg centers and radii
   - Non-maximum suppression to remove duplicates

3. **Egg Analysis**:
   - Validation of detected eggs
   - Broken egg detection using:
     - Edge detection
     - Texture analysis
     - Color profile analysis
   - Position calculation:
     - Image coordinates → Robot-relative coordinates
     - Robot-relative coordinates → World coordinates

4. **Data Publication**:
   - Egg count published to `/egguard/egg_count`
   - Detailed egg data published to `/egguard/egg_data`
   - Visualization images published to `/egguard/processed_image` and `/egguard/yolo_raw`

5. **Backend Communication**:
   - Egg data sent to configurable backend API
   - Includes world coordinates and broken status
   - Configurable via environment variable `EGGUARD_BACKEND_URL`

## Testing and Simulation

The package includes a simulation tool (`simulation.py`) for testing the detection and analysis pipeline without ROS2.

### Using simulation.py

1. **Basic Usage**:
```bash
python3 simulation.py --model_path ./../../egguard_models/best.pt
```

2. **Testing with an Image**:
```bash
python3 simulation.py --input media_for_testing/egg_image_3.jpg --model_path ./../../egguard_models/best.pt
```

3. **Testing with a Video**:
```bash
python3 simulation.py --input media_for_testing/video_huevos.mp4 --model_path ./../../egguard_models/best.pt
```

Note: Ensure your test media is in the `media_for_testing` folder.

### Simulation Features

- Tests YOLO detection pipeline
- Visualizes detections in real-time
- Shows egg status (broken/OK)
- Displays coordinates
- Saves results to:
  - `simulation_data/egg_detection_result.jpg`
  - `simulation_data/egg_data.json`

## Configuration

### Environment Variables

- `EGGUARD_BACKEND_URL`: Backend API URL (default: `http://localhost:8081/api/v1/robots/1/eggs`)
- `EGGUARD_MODEL_PATH`: Path to YOLO model file

### Camera Parameters

Default camera parameters (configurable via `/camera/camera_info`):
```python
{
    'height_mm': 150,           # Camera height from ground
    'angle_rad': 0.5,           # Camera tilt angle
    'offset_x_mm': 0,           # X offset from robot center
    'offset_y_mm': 69,          # Y offset from robot center
    'focal_length_pixels': 800, # Focal length
    'fov_h_rad': 1.05          # Horizontal FOV
}
```

## Dependencies

- ROS2 (Humble or later)
- OpenCV 4.x
- NumPy
- cv_bridge
- tf2_ros
- ultralytics (for YOLOv8n)
- requests (for backend API)

## Installation

1. Clone the repository:
```bash
cd ~/ros2_ws/src
git clone https://github.com/Egguard/egguard.git
```

2. Install dependencies:
```bash
cd ~/ros2_ws
rosdep install --from-paths src --ignore-src -r -y
```

3. Build the package:
```bash
colcon build --packages-select egguard_computer_vision
```

4. Source the setup file:
```bash
source ~/ros2_ws/install/setup.bash
```

## Usage

1. Launch the node:
```bash
ros2 launch egguard_computer_vision egguard_vision.launch.py
```

2. Monitor the output topics:
```bash
ros2 topic echo /egguard/egg_data
ros2 topic echo /egguard/egg_count
```

3. View the visualization:
```bash
ros2 run rqt_image_view rqt_image_view /egguard/processed_image
```

## Troubleshooting

1. **No eggs detected**:
   - Check camera image quality
   - Verify YOLO model is loaded correctly
   - Adjust confidence threshold if needed

2. **Incorrect positions**:
   - Verify camera parameters
   - Check odometry data is being received
   - Calibrate camera parameters if needed

3. **Backend communication issues**:
   - Verify backend URL is correct
   - Check network connectivity
   - Monitor backend API logs

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Contributors

- [Alejandro Rosado Jiménez](https://github.com/Xalex79)

## Acknowledgments

- This package was developed for the EggGuard robot system
- Special thanks to the ROS2 and OpenCV communities