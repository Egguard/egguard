>>>>>>>>>> #COMPILAR

#POR ORDEN: CUSTOM_INTERFACES, MODE_MANAGER, NAV2_SYSTEM, WORLD, ASYNC_WEB_SERVER_CPP, WEB_VIDEO_SERVER
colcon build --packages-select egguard_nav2_system
source ./install/setup.bash

#WORLD (LA PRIMERA VEZ QUE ABRAS EL GAZEBO, CAMBIAR POR LA RUTA DONDE TENGAS EL PROYECTO)
export GAZEBO_MODEL_DATABASE_URI="" #para no intentar cargar modelos 3d de webs gazebo 
export GAZEBO_MODEL_PATH=$HOME/egguard/install/egguard_world/share/egguard_world/models/model_editor_models:$HOME/egguard/install/egguard_world/share/egguard_world/models

ros2 launch egguard_world egguard_world.launch.py

#EL QUE SE ENCARGA DE CARGAR MAPA Y SITUAR AL ROBOT AL PRINCIPIO CON AMCL
ros2 launch egguard_nav2_system provide_map.launch.py use_sim_time:=True

#EL QUE SE ENCARGA DE CARGAR EL MAPA
ros2 service call /map_server/load_map nav2_msgs/srv/LoadMap "{map_url: $HOME/egguard/egguard_nav2_system/config/my_map.yaml}"

#SITUA EL ROBOT EN EL MAPA
#YA NO HACE FALTA HACER ESTE COMANDO ros2 run egguard_nav2_system initial_pose_pub

#ESTE PONE EL MODO INICIAL
ros2 launch egguard_mode_manager initial_mode_publisher.launch.py

PARA AUTONOMO:

    #INICIA LOS NODOS DE NAVEGACION AUTONOMA DE NAV2
    ros2 launch egguard_nav2_system autonomous_controller.launch.py

    #ESTE CORRE EL NODO NUESTRO DE NAVEGACION AUTONOMA
    ros2 run egguard_nav2_system autonomous_controller

PARA PROBAR EL ROSWEB MANUAL:

    rosenv
    sudo apt update
    sudo apt install ros-galactic-rosbridge-suite

    # Empieza a escuchar por el puerto 9090 para aceptar conexiones
    ros2 launch rosbridge_server rosbridge_websocket_launch.xml

    # Lanza el nodo manual
    ros2 launch egguard_nav2_system manual_controller.launch.py

    #Jugar con manejo en terminal
    ros2 topic pub /manual_nav egguard_custom_interfaces/msg/ManualNav "{velocity: 100, direction: 'left', stop_now: true}"
    ros2 topic pub --qos-durability transient_local /mode egguard_custom_interfaces/msg/Mode "{mode: 'manual'}"
    then on egguard-frontend npm run dev and press the buttons


PARA USAR RECONOCIMIENTO OPENCV

    #En nueva terminal, y con el paquete compilado (colcon build --packages-select egguard_computer_vision y source install/setup.bash):
    ros2 launch egguard_computer_vision egguard_vision.launch.py


>>>>>>>>>> # PARA PROBAR CON ROBOT REAL

>> MAPEAR Y GUARDAR MAPA 

    #terminal 1 CONEXION ROBOT INICIALIZACION
    >>>Meterse al wifi que toca<<< (ver pdf de conexiones)
    ssh ubuntu@192.168.0.133
    turtlebot #contrase침a
    ros2 launch turtlebot3_bringup robot.launch.py


    #terminal 2 RVIZ
    export ROS_DOMAIN_ID=80
    source ./install/setup.bash
    ros2 launch turtlebot3_cartographer cartographer.launch.py use_sim_time:=False


    #terminal 3 MOVIMIENTO MANUAL TECLADO ROBOT REAL
    export ROS_DOMAIN_ID=80
    source ./install/setup.bash
    ros2 run turtlebot3_teleop teleop_keyboard

    #terminal 4
    ros2 run nav2_map_server map_saver_cli -f $HOME/Escritorio

>> VER CAMARA REAL Y DETECCION OPENCV

    #terminal 1 CONEXION ROBOT INICIALIZACION
    ssh ubuntu@192.168.0.133
    #contrase침a 
    turtlebot
    ros2 launch turtlebot3_bringup robot.launch.py

    #terminal 2 CAMARA ROBOT REAL
    ssh ubuntu@192.168.0.133
    #contrase침a 
    turtlebot
    export ROS_DOMAIN_ID=80
    ros2 run image_tools cam2image --ros-args -p burger_mode:=false -p frequency:=1.0 -p reliability:=best_effort

    #terminal 3 VER CAMARA REAL
    cd egguard
    export ROS_DOMAIN_ID=80
    source ./install/setup.bash
    ros2 run image_tools showimage --ros-args -p show_image:=true -p reliability:=best_effort

    #terminal 4 DETECCION YOLO
    export ROS_DOMAIN_ID=80
    source ./install/setup  .bash
    ros2 launch egguard_computer_vision egguard_vision.launch.py

    #terminal 5 MOVIMIENTO MANUAL TECLADO ROBOT REAL
    export ROS_DOMAIN_ID=80
    source ./install/setup.bash
    ros2 run turtlebot3_teleop teleop_keyboard

>>>>>>>>>> PARA CERRAR GAZEBO SI SE QUEDA PILLADO

#terminal

ps #saldr치 lista de procesos activos, busca uno que se llame gzclient
kill NUMERO_PROCESO

colcon build --packages-select egguard_predator_detector
ros2 launch egguard_predator_detector predator_detector.launch.py
